# ÁªôÂÆö‰∏Ä‰∏™ÊúâÂ∫èÊï¥Êï∞Êï∞ÁªÑÔºåÂÖÉÁ¥†ÂêÑ‰∏çÁõ∏Âêå‰∏îÊåâÂçáÂ∫èÊéíÂàóÔºåÁºñÂÜô‰∏Ä‰∏™ÁÆóÊ≥ïÔºåÂàõÂª∫‰∏ÄÊ£µÈ´òÂ∫¶ÊúÄÂ∞èÁöÑ‰∫åÂèâÊêúÁ¥¢Ê†ë„ÄÇÁ§∫‰æã: ÁªôÂÆöÊúâÂ∫èÊï∞ÁªÑ: [-10,-3,0,5,9], ‰∏Ä‰∏™ÂèØËÉΩ
# ÁöÑÁ≠îÊ°àÊòØÔºö[0,-3,9,-10,null,5]ÔºåÂÆÉÂèØ‰ª•Ë°®Á§∫‰∏ãÈù¢Ëøô‰∏™È´òÂ∫¶Âπ≥Ë°°‰∫åÂèâÊêúÁ¥¢Ê†ëÔºö           0          / \        -3 
#   9        /   /      -10  5 Related Topics Ê†ë ‰∫åÂèâÊêúÁ¥¢Ê†ë Êï∞ÁªÑ ÂàÜÊ≤ª ‰∫åÂèâÊ†ë üëç 130 üëé 0


# leetcode submit region begin(Prohibit modification and deletion)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:

    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:
        # ÁªàÊ≠¢Êù°‰ª∂
        if len(nums) == 0:
            return None
        if len(nums) == 1:
            return TreeNode(nums[0])
        if len(nums) == 2:
            rt = TreeNode(nums[1])
            lf = TreeNode(nums[0])
            rt.left = lf
            return rt
        if len(nums) == 3:
            rt = TreeNode(nums[1])
            lf = TreeNode(nums[0])
            rf = TreeNode(nums[2])
            rt.left = lf
            rt.right = rf
            return rt

        mid = len(nums) // 2
        rootNode = TreeNode(nums[mid])
        lnums = nums[:mid]
        rnums = nums[mid + 1:]
        ltree = self.sortedArrayToBST(lnums)
        rtree = self.sortedArrayToBST(rnums)
        rootNode.left = ltree
        rootNode.right = rtree
        return rootNode

# leetcode submit region end(Prohibit modification and deletion)
