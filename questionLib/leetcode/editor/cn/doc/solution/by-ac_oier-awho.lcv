## 哈希表 + 树的搜索

在递归搜索过程中记录下相应的节点值（使用 `Set` 集合），如果在遍历某个节点 $x$ 时发现集合中存在 $k - x.val$，说明存在两个节点之和等于 $k$，返回 `True`，若搜索完整棵树都没有则返回 `False`。

代码：

* []

```Java
class Solution {
    Set<Integer> set = new HashSet<>();
    public boolean findTarget(TreeNode root, int k) {
        if (root == null) return false;
        if (set.contains(k - root.val)) return true;
        set.add(root.val);
        return findTarget(root.left, k) || findTarget(root.right, k);
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 双指针 + BST 中序遍历

解法一中没有利用 `BST` 特性，利用 `BST` 中序遍历有序的特性，我们可以实现类似「双指针」的效果。

起始先让 BST 的最左链和最右链完全入栈，此时栈顶元素为 BST 中的最小值和最大值，分别使用 `l` 和 `r` 充当指针代指，根据两指针指向的节点值之和与 $k$ 的大小关系来指导如何让 `l` 和 `r` 移动，`l` 的移动过程其实就是找下一个比 `l.val` 更大的值，而 `r` 的移动过程其实就是找下一个比 `r.val` 更小的值。

代码：

* []

```Java
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        Deque<TreeNode> ld = new ArrayDeque<>(), rd = new ArrayDeque<>();
        TreeNode temp = root;
        while (temp != null) {
            ld.addLast(temp);
            temp = temp.left;
        }
        temp = root;
        while (temp != null) {
            rd.addLast(temp);
            temp = temp.right;
        }
        TreeNode l = ld.peekLast(), r = rd.peekLast();
        while (l.val < r.val) {
            int t = l.val + r.val;
            if (t == k) return true;
            if (t < k) l = getNext(ld, true);
            else r = getNext(rd, false);
        }
        return false;
    }
    TreeNode getNext(Deque<TreeNode> d, boolean isLeft) {
        TreeNode node = isLeft ? d.pollLast().right : d.pollLast().left;
        while (node != null) {
            d.addLast(node);
            node = isLeft ? node.left : node.right;
        }
        return d.peekLast();
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
