数据流中的第K大（小）问题，考察的就是堆这个数据结构。我们给自己加一点难度，手写实现一个。

### 方法一：使用heapq库

* []

```python
class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.heap = []
        self.k = k
        for num in nums:
            heapq.heappush(self.heap,num)
            if len(self.heap) > k:
                heapq.heappop(self.heap)


    def add(self, val: int) -> int:
        heapq.heappush(self.heap,val)
        if len(self.heap) > self.k:
            heapq.heappop(self.heap)
        return self.heap[0]
```

### 方法二：手写实现

我们通过自己手写来详细刨析一下堆这个数据结构到底是怎么实现的。

##### 堆的特点：

1. 内部数据是有序的
2. 可以弹出堆顶的元素，大顶堆就是弹出最大值，小顶堆就是弹出最小值
3. 每次加入新元素或者弹出堆顶元素后，调整堆使之重新有序仅需要O(logn)的时间
4. 支持在线算法

##### 堆的本质：

1. 它是一个完全二叉树
2. 实现的时候我们不需要建造一个树，改用一个数组即可

- **那么我们是如何把一个完全二叉树和一个数组关联到一起的呢？**
- 给树的节点**编号**，节点的编号就是元素在数组中的下标
  ![幻灯片1.JPG](https://pic.leetcode-cn.com/1609834142-VnDgJC-%E5%B9%BB%E7%81%AF%E7%89%871.JPG)

3. 于是我们发现一个很重要的结论：
   已知一个节点的编号为`index`，那么它的父节点的编号为：
   $$ father\_index = \lfloor {index-1 \over 2}\rfloor $$
   左孩子节点的编号为
   $$ left\_index = index * 2 + 1 $$
   右孩子节点的编号为
   $$ right\_index = index * 2 + 2 $$

##### 如何调整堆

1. 添加元素

- 把新数据添加到树的最后一个元素，也就是数组的末尾
- 把末尾节点向上调整

<![幻灯片13.JPG](https://pic.leetcode-cn.com/1609834563-aTgETe-%E5%B9%BB%E7%81%AF%E7%89%8713.JPG),![幻灯片14.JPG](https://pic.leetcode-cn.com/1609834567-fFIMGZ-%E5%B9%BB%E7%81%AF%E7%89%8714.JPG),![幻灯片15.JPG](https://pic.leetcode-cn.com/1609834570-tPzXHC-%E5%B9%BB%E7%81%AF%E7%89%8715.JPG),![幻灯片16.JPG](https://pic.leetcode-cn.com/1609834575-JXvZAf-%E5%B9%BB%E7%81%AF%E7%89%8716.JPG),![幻灯片17.JPG](https://pic.leetcode-cn.com/1609834579-xjmKpN-%E5%B9%BB%E7%81%AF%E7%89%8717.JPG),![幻灯片18.JPG](https://pic.leetcode-cn.com/1609834583-DPxNWY-%E5%B9%BB%E7%81%AF%E7%89%8718.JPG),![幻灯片19.JPG](https://pic.leetcode-cn.com/1609834586-dhsFDN-%E5%B9%BB%E7%81%AF%E7%89%8719.JPG),![幻灯片20.JPG](https://pic.leetcode-cn.com/1609834590-mNezcJ-%E5%B9%BB%E7%81%AF%E7%89%8720.JPG),![幻灯片21.JPG](https://pic.leetcode-cn.com/1609834596-AHqofg-%E5%B9%BB%E7%81%AF%E7%89%8721.JPG),![幻灯片22.JPG](https://pic.leetcode-cn.com/1609834600-jNOJKH-%E5%B9%BB%E7%81%AF%E7%89%8722.JPG),![幻灯片23.JPG](https://pic.leetcode-cn.com/1609834604-mPxNju-%E5%B9%BB%E7%81%AF%E7%89%8723.JPG)>

2. 弹出堆顶

- 交换根节点与最后一个节点的值
- 删除最后一个节点
- 把根节点向下调整

<![幻灯片2.JPG](https://pic.leetcode-cn.com/1609834187-AXZQoT-%E5%B9%BB%E7%81%AF%E7%89%872.JPG),![幻灯片3.JPG](https://pic.leetcode-cn.com/1609834194-kFqGfN-%E5%B9%BB%E7%81%AF%E7%89%873.JPG),![幻灯片4.JPG](https://pic.leetcode-cn.com/1609834200-UdQoBo-%E5%B9%BB%E7%81%AF%E7%89%874.JPG),![幻灯片5.JPG](https://pic.leetcode-cn.com/1609834206-wEZXXA-%E5%B9%BB%E7%81%AF%E7%89%875.JPG),![幻灯片6.JPG](https://pic.leetcode-cn.com/1609834213-CnHACm-%E5%B9%BB%E7%81%AF%E7%89%876.JPG),![幻灯片7.JPG](https://pic.leetcode-cn.com/1609834218-KUJJTp-%E5%B9%BB%E7%81%AF%E7%89%877.JPG),![幻灯片8.JPG](https://pic.leetcode-cn.com/1609834222-zjsTbr-%E5%B9%BB%E7%81%AF%E7%89%878.JPG),![幻灯片9.JPG](https://pic.leetcode-cn.com/1609834226-bqtabj-%E5%B9%BB%E7%81%AF%E7%89%879.JPG),![幻灯片10.JPG](https://pic.leetcode-cn.com/1609834230-txUrGu-%E5%B9%BB%E7%81%AF%E7%89%8710.JPG),![幻灯片11.JPG](https://pic.leetcode-cn.com/1609834234-daXPjL-%E5%B9%BB%E7%81%AF%E7%89%8711.JPG),![幻灯片12.JPG](https://pic.leetcode-cn.com/1609834502-aFhXCL-%E5%B9%BB%E7%81%AF%E7%89%8712.JPG)>

##### 所以需要写的函数有

1. 初始化

* []

```python
def __init__(self,desc=False):
    """
    初始化，默认创建一个小顶堆
    """
    self.heap = []
    self.desc = desc
```

2. 堆的大小

* []

```python
@property
def size(self):
    return len(self.heap)
```

3. 返回堆顶元素

* []

```python
def top(self):
    if self.size:
        return self.heap[0]
    return None
```

4. 添加元素

* []

```python
def push(self,item):
    """
    添加元素
    第一步，把元素加入到数组末尾
    第二步，把末尾元素向上调整
    """
    self.heap.append(item)
    self._sift_up(self.size-1)
```

5. 弹出堆顶元素

* []

```python
def pop(self):
    """
    弹出堆顶
    第一步，记录堆顶元素的值
    第二步，交换堆顶元素与末尾元素
    第三步，删除数组末尾元素
    第四步，新的堆顶元素向下调整
    第五步，返回答案
    """
    item = self.heap[0]
    self._swap(0,self.size-1)
    self.heap.pop()
    self._sift_down(0)
    return item
```

6. 判断两个元素的大小关系，这里有个小trick

* []

```python
def _smaller(self,lhs,rhs):
    return lhs > rhs if self.desc else lhs < rhs
```

7. 向上调整

* []

```python
def _sift_up(self,index):
    """
    向上调整
    如果父节点和当前节点满足交换的关系
    （对于小顶堆是父节点元素更大，对于大顶堆是父节点更小），
    则持续将当前节点向上调整
    """
    while index:
        parent = (index-1) // 2
                if self._smaller(self.heap[parent],self.heap[index]):
            break
                    self._swap(parent,index)
        index = parent
```

8. 向下调整

* []

```python
    def _sift_down(self,index):
        """
        向下调整
        如果子节点和当前节点满足交换的关系
        （对于小顶堆是子节点元素更小，对于大顶堆是子节点更大），
        则持续将当前节点向下调整
        """
        # 若存在子节点
        while index*2+1 < self.size:
            smallest = index
            left = index*2+1
            right = index*2+2
            
            if self._smaller(self.heap[left],self.heap[smallest]):
                smallest = left
                
            if right < self.size and self._smaller(self.heap[right],self.heap[smallest]):
                smallest = right
                
            if smallest == index:
                break

            self._swap(index,smallest)
            index = smallest
```

9. 交换两个元素

* []

```python
def _swap(self,i,j):
    self.heap[i],self.heap[j] = self.heap[j],self.heap[i]
```

##### 完整代码

* []

```python
class Heap:
    def __init__(self,desc=False):
        """
        初始化，默认创建一个小顶堆
        """
        self.heap = []
        self.desc = desc
    
    @property
    def size(self):
        return len(self.heap)
    
    def top(self):
        if self.size:
            return self.heap[0]
        return None
    
    def push(self,item):
        """
        添加元素
        第一步，把元素加入到数组末尾
        第二步，把末尾元素向上调整
        """
        self.heap.append(item)
        self._sift_up(self.size-1)
    
    def pop(self):
        """
        弹出堆顶
        第一步，记录堆顶元素的值
        第二步，交换堆顶元素与末尾元素
        第三步，删除数组末尾元素
        第四步，新的堆顶元素向下调整
        第五步，返回答案
        """
        item = self.heap[0]
        self._swap(0,self.size-1)
        self.heap.pop()
        self._sift_down(0)
        return item
    
    def _smaller(self,lhs,rhs):
        return lhs > rhs if self.desc else lhs < rhs
    
    def _sift_up(self,index):
        """
        向上调整
        如果父节点和当前节点满足交换的关系
        （对于小顶堆是父节点元素更大，对于大顶堆是父节点更小），
        则持续将当前节点向上调整
        """
        while index:
            parent = (index-1) // 2
            
            if self._smaller(self.heap[parent],self.heap[index]):
                break
                
            self._swap(parent,index)
            index = parent
    
    def _sift_down(self,index):
        """
        向下调整
        如果子节点和当前节点满足交换的关系
        （对于小顶堆是子节点元素更小，对于大顶堆是子节点更大），
        则持续将当前节点向下调整
        """
        # 若存在子节点
        while index*2+1 < self.size:
            smallest = index
            left = index*2+1
            right = index*2+2
            
            if self._smaller(self.heap[left],self.heap[smallest]):
                smallest = left
                
            if right < self.size and self._smaller(self.heap[right],self.heap[smallest]):
                smallest = right
                
            if smallest == index:
                break
            
            self._swap(index,smallest)
            index = smallest
    
    def _swap(self,i,j):
        self.heap[i],self.heap[j] = self.heap[j],self.heap[i]

class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.heap = Heap()
        self.k = k
        for num in nums:
            self.heap.push(num)
            if self.heap.size > k:
                self.heap.pop()


    def add(self, val: int) -> int:
        self.heap.push(val)
        if self.heap.size > self.k:
            self.heap.pop()
        return self.heap.top()

```

