## 双端队列

根据题意，我们可以使用变量 `n` 将初始化传入的 `size` 进行转存，同时使用「双端队列」来存储 `next` 所追加的值（添加到队列尾部），当双端队列所包含元素超过规定数量 `n` 时，我们从队列头部进行 `pop` 操作，整个维护过程使用变量 `sum` 记录当前包含的元素和。

利用 `next` 操作最多被调用 $10^4$ 次，我们可以使用直接开个 $10^4$ 数组来充当双端队列，使用两指针 `j` 和 `i` 分别指向队列的头部和尾部。

代码：

* []

```Java
class MovingAverage {
    int[] arr = new int[10010];
    int n, sum, j, i;
    public MovingAverage(int size) {
        n = size;
    }
    public double next(int val) {
        sum += arr[i++] = val;
        if (i - j > n) sum -= arr[j++];
        return sum * 1.0 / (i - j);
    }
}
```

* []

```Typescript
class MovingAverage {
    arr: number[] = new Array<number>(10010).fill(0)
    n: number = 0; sum: number = 0; i: number = 0; j: number = 0;
    constructor(size: number) {
        this.n = size
    }
    next(val: number): number {
        this.sum += this.arr[this.i++] = val
        if (this.i - this.j > this.n) this.sum -= this.arr[this.j++]
        return this.sum / (this.i - this.j)
    }
}
```

* 时间复杂度：$O(m)$，其中 $m$ 为 `next` 操作的调用次数
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
