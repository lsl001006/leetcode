## 朴素解法（BFS & DFS）

如果不考虑利用二叉搜索树特性的话，一个朴素的做法是将所有节点的 $val$ 存到一个数组中。

对数组进行排序，并获取答案。

将所有节点的 $val$ 存入数组，可以使用 BFS 或者 DFS。

代码：

* []

```Java
class Solution {
    public int minDiffInBST(TreeNode root) {
        List<Integer> list = new ArrayList<>();

        // BFS
        Deque<TreeNode> d = new ArrayDeque<>();
        d.addLast(root);
        while (!d.isEmpty()) {
            TreeNode poll = d.pollFirst();
            list.add(poll.val);
            if (poll.left != null) d.addLast(poll.left);
            if (poll.right != null) d.addLast(poll.right);
        }

        // DFS
        // dfs(root, list);

        Collections.sort(list);
        int n = list.size();
        int ans = Integer.MAX_VALUE;
        for (int i = 1; i < n; i++) {
            int cur = Math.abs(list.get(i) - list.get(i - 1));
            ans = Math.min(ans, cur);
        }
        return ans;
    }
    void dfs(TreeNode root, List<Integer> list) {
        list.add(root.val);
        if (root.left != null) dfs(root.left, list);
        if (root.right != null) dfs(root.right, list);
    }
}
```

* 时间复杂度：$O(n\log{n})$
* 空间复杂度：$O(n)$

---

## 中序遍历（栈模拟 & 递归）

不难发现，在朴素解法中，我们对树进行搜索的目的是为了获取一个「有序序列」，然后从「有序序列」中获取答案。

而二叉搜索树的中序遍历是有序的，因此我们可以直接对「二叉搜索树」进行中序遍历，保存遍历过程中的相邻元素最小值即是答案。

**代码（感谢 [@宫水三叶的小迷妹](/u/san_ye_fen/)、[@Benhao](/u/qubenhao/) 和 [@天](/u/tian-et/) 三位同学提供的其他语言版本）：**

* []

```Java
class Solution {
    int ans = Integer.MAX_VALUE;
    TreeNode prev = null;
    public int minDiffInBST(TreeNode root) {
        // 栈模拟
        Deque<TreeNode> d = new ArrayDeque<>();
        while (root != null || !d.isEmpty()) {
            while (root != null) {
                d.addLast(root);
                root = root.left;
            }
            root = d.pollLast();
            if (prev != null) {
                ans = Math.min(ans, Math.abs(prev.val - root.val));
            }
            prev = root;
            root = root.right;
        }

        // 递归
        // dfs(root);

        return ans;
    }
    void dfs(TreeNode root) {
        if (root == null) return;
        dfs(root.left);
        if (prev != null) {
            ans = Math.min(ans, Math.abs(prev.val - root.val));
        } 
        prev = root;
        dfs(root.right);
    }
}
```

* []

```Python3
class Solution(object):
    # 栈模拟 Author : 宫水三叶的小迷妹
    def minDiffInBST(self, root):
        ans, pre = float("inf"), -1
        stack = []
        while root or stack:      
            while root:
                stack.append(root)
                root = root.left
            root = stack.pop(-1)
            if pre == -1:
                pre = root.val
            else:
                ans = min(ans,root.val - pre)
                pre = root.val
            root = root.right 
        return ans

    # 递归 Author : Benhao
    def minDiffInBST(self, root: TreeNode) -> int:
        """
        :type root: TreeNode
        :rtype: int
        """
        def in_order(prev, curr, m):
            if not curr:
                return prev, m
            prev, m = in_order(prev, curr.left, m)
            m, prev = min(m, curr.val - prev), curr.val
            return in_order(prev, curr.right, m)
        return in_order(-float("inf"),root,float("inf"))[1]
```

* []

```C#
public class Solution {
    int ans = Int32.MaxValue;
    TreeNode pre = null;
    public int MinDiffInBST(TreeNode root) {
        // 栈模拟
        Stack<TreeNode> stack = new Stack<TreeNode>();
        while (stack.Count > 0 || root != null)
        {
            while (root != null)
            {
                stack.Push(root);
                root = root.left;
            }
            root = stack.Pop();
            if (pre != null)
            {
                int cur = Math.Abs(root.val - pre.val);
                ans = Math.Min(ans, cur);
            }
            pre = root;
            root = root.right;
        }

        // 递归
        // dfs(root);
        return ans;
    }
    public void dfs(TreeNode root)
    {
        if (root == null) return;
        if (root.left != null) dfs(root.left);
        if (pre != null)
        {
            int cur = Math.Abs(root.val - pre.val);
            ans = Math.Min(ans, cur);
        }
        pre = root;
        if (root.right != null) dfs(root.right);
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
