#### 方法一：顺序查找

**思路与算法**

最简单直接的方法即为顺序查找，假设当前链表的长度为 $n$，则我们知道链表的倒数第 $k$ 个节点即为正数第 $n - k$ 个节点，此时我们只需要顺序遍历到链表的第 $n - k$ 个节点即为倒数第 $k$ 个节点。

- 我们首先求出链表的长度 $n$，然后顺序遍历到链表的第 $n - k$ 个节点返回即可。

**代码**

* [sol1-C++]

```C++
class Solution {
public:
    ListNode* getKthFromEnd(ListNode* head, int k) {
        int n = 0;
        ListNode* node = nullptr;

        for (node = head; node; node = node->next) {
            n++;
        }
        for (node = head; n > k; n--) {
            node = node->next;
        }
      
        return node;
    }
};
```

* [sol1-Java]

```Java
class Solution {
    public ListNode getKthFromEnd(ListNode head, int k) {
        int n = 0;
        ListNode node = null;

        for (node = head; node != null; node = node.next) {
            n++;
        }
        for (node = head; n > k; n--) {
            node = node.next;
        }

        return node;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public ListNode GetKthFromEnd(ListNode head, int k) {
        int n = 0;
        ListNode node = null;

        for (node = head; node != null; node = node.next) {
            n++;
        }
        for (node = head; n > k; n--) {
            node = node.next;
        }

        return node;
    }
}
```

* [sol1-Python3]

```Python
class Solution:
    def getKthFromEnd(self, head: ListNode, k: int) -> ListNode:
        node, n = head, 0  
        while node:
            node = node.next
            n += 1

        node = head
        for _ in range(n-k):
            node = node.next
        
        return node  
```

* [sol1-JavaScript]

```JavaScript
var getKthFromEnd = function(head, k) {
    let node = head, n = 0;
    while (node) {
        node = node.next;
        n++;
    }
    node = head;
    for (let i = 0; i < n - k; i++) {
        node = node.next;
    }
    return node; 
};
```

* [sol1-Golang]

```go
func getKthFromEnd(head *ListNode, k int) (kth *ListNode) {
    n := 0
    for node := head; node != nil; node = node.Next {
        n++
    }
    for kth = head; n > k; n-- {
        kth = kth.Next
    }
    return
}
```

**复杂度分析**

- 时间复杂度：$O(n)$，其中 $n$ 为链表的长度。需要两次遍历。

- 空间复杂度：$O(1)$。

#### 方法二：双指针

**思路与算法**

快慢指针的思想。我们将第一个指针 $\textit{fast}$ 指向链表的第 $k + 1$ 个节点，第二个指针 $\textit{slow}$ 指向链表的第一个节点，此时指针 $\textit{fast}$ 与 $\textit{slow}$ 二者之间刚好间隔 $k$ 个节点。此时两个指针同步向后走，当第一个指针 $\textit{fast}$ 走到链表的尾部空节点时，则此时 $\textit{slow}$ 指针刚好指向链表的倒数第$k$个节点。

- 我们首先将 $\textit{fast}$ 指向链表的头节点，然后向后走 $k$ 步，则此时 $\textit{fast}$ 指针刚好指向链表的第 $k + 1$ 个节点。

- 我们首先将 $\textit{slow}$ 指向链表的头节点，同时 $\textit{slow}$ 与 $\textit{fast}$ 同步向后走，当 $\textit{fast}$ 指针指向链表的尾部空节点时，则此时返回 $\textit{slow}$ 所指向的节点即可。

**代码**

* [sol2-C++]

```C++
class Solution {
public:
    ListNode* getKthFromEnd(ListNode* head, int k) {
        ListNode* fast = head;
        ListNode* slow = head;

        while (fast && k > 0) {
            fast = fast->next;
            k--;
        }
        while (fast) {
            fast = fast->next;
            slow = slow->next;
        }

        return slow;
    }
};
```

* [sol2-Java]

```Java
class Solution {
    public ListNode getKthFromEnd(ListNode head, int k) {
        ListNode fast = head;
        ListNode slow = head;

        while (fast != null && k > 0) {
            fast = fast.next;
            k--;
        }
        while (fast != null) {
            fast = fast.next;
            slow = slow.next;
        }

        return slow;
    }
}
```

* [sol2-C#]

```C#
public class Solution {
    public ListNode GetKthFromEnd(ListNode head, int k) {
        ListNode fast = head;
        ListNode slow = head;

        while (fast != null && k > 0) {
            fast = fast.next;
            k--;
        }
        while (fast != null) {
            fast = fast.next;
            slow = slow.next;
        }

        return slow;
    }
}
```

* [sol2-Python3]

```Python
class Solution:
    def getKthFromEnd(self, head: ListNode, k: int) -> ListNode:
        fast, slow = head, head

        while fast and k > 0:
            fast, k = fast.next, k - 1
        while fast:
            fast,slow = fast.next,slow.next
        
        return slow
```

* [sol2-JavaScript]

```JavaScript
var getKthFromEnd = function(head, k) {
    let fast = head, slow = head;
    
    while (fast && k > 0) {
        [fast, k] = [fast.next, k - 1];
    }
    while (fast) {
        [fast, slow] = [fast.next, slow.next];
    }
    return slow;
};
```

* [sol2-Golang]

```go
func getKthFromEnd(head *ListNode, k int) *ListNode {
    fast, slow := head, head
    for fast != nil && k > 0 {
        fast = fast.Next
        k--
    }
    for fast != nil {
        fast = fast.Next
        slow = slow.Next
    }
    return slow
}
```

**复杂度分析**

- 时间复杂度：$O(n)$，其中 $n$ 为链表的长度。我们使用快慢指针，只需要一次遍历即可，复杂度为 $O(n)$。

- 空间复杂度：$O(1)$。

