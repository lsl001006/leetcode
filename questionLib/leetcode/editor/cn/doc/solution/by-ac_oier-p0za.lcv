## 基本分析

容易想到时间复杂度为 $O(l + m \times n)$，空间复杂度为 $O(m + n)$ 的做法，在此不再赘述。

对于某个位置最终累加值为奇数的充要条件为「所在行被累加次数的奇偶性」与「所在列被累加次数的奇偶性」不同。

因此我们可以统计累加次数为奇数的行数 $a$（累加次数为偶数的行数为 $m - a$），累加次数为奇数的列数 $b$（累加次数为偶数的列数为 $n - b$），根据乘法原理，最终答案为 $a \times (n - b) + (m - a) \times b$。

---

## 计数模拟

由于我们只需关系某个位置的奇偶性，而不关心具体的累加值，我们可以创建两个数组 `r` 和 `c`，统计每行和每列的累加值的奇偶性。

当 $r[idx]$ 为 `True` 含义为第 $idx$ 行的累加值为奇数，否则为偶数。列数组 `c` 的统计规则同理。

代码：

* []

```Java
class Solution {
    public int oddCells(int m, int n, int[][] ins) {
        boolean[] r = new boolean[m], c = new boolean[n];
        int a = 0, b = 0;
        for (int[] info : ins) {
            a += (r[info[0]] = !r[info[0]]) ? 1 : -1;
            b += (c[info[1]] = !c[info[1]]) ? 1 : -1;
        }
        return a * (n - b) + (m - a) * b;
    }
}
```

* []

```TypeScript
function oddCells(m: number, n: number, ins: number[][]): number {
    const r = new Array<boolean>(m).fill(false), c = new Array<boolean>(n).fill(false)
    let a = 0, b = 0
    for (const [i, j] of ins) {
        a += (r[i] = !r[i]) ? 1 : -1
        b += (c[j] = !c[j]) ? 1 : -1
    }
    return a * (n - b) + (m - a) * b
};
```

* []

```Python3
class Solution:
    def oddCells(self, m: int, n: int, ins: List[List[int]]) -> int:
        r, c = [False] * m, [False] * n
        for i, j in ins:
            r[i] ^= 1
            c[j] ^= 1
        a, b = sum(r), sum(c)
        return a * (n - b) + (m - a) * b
```

* 时间复杂度：构建计数数组的复杂度为 $O(m + n)$，统计奇数行和奇数列复杂度为 $O(l)$，其中 $l$ 为数组 `ins` 的长度，复杂度为 $O(m + n + l)$
* 空间复杂度：$O(m + n)$

---

## 位运算

更进一步，我们可以使用两个 `long` 变量 $c1$ 和 $c2$ 来分别充当行和列的计数数组，当 $c1$ 的第 $k$ 位为 $1$，代表第 $k$ 行累加值为奇数，当 $c1$ 的第 $k$ 位为 $0$，代表第 $k$ 行累加值为偶数；$c2$ 的计数规则同理。而翻转二进制中的某一位可使用「异或」操作。

当处理完所有的 `ins` 之后，可通过「遍历 $c1$ 的低 $m$ 位 + 遍历 $c2$ 的低 $n$ 位」来得到行数中奇数个数 $a$，列数中奇数个数 $b$，复杂度为 $O(m + n)$；也使用 `bitCount` 统计 `long` 二进制数中 $1$ 的个数（本质是分治操作），复杂度为 $O(\log{64})$。

代码：

* []

```Java
class Solution {
    public int oddCells(int m, int n, int[][] ins) {
        long c1 = 0, c2 = 0;
        for (int[] info : ins) {
            c1 ^= 1L << info[0];
            c2 ^= 1L << info[1];
        }
        int a = 0, b = 0;
        for (int i = 0; i < m; i++) a += ((c1 >> i) & 1);
        for (int i = 0; i < n; i++) b += ((c2 >> i) & 1);
        return a * (n - b) + (m - a) * b;
    }
}
```

* []

```Java
class Solution {
    public int oddCells(int m, int n, int[][] ins) {
        long c1 = 0, c2 = 0;
        for (int[] info : ins) {
            c1 ^= 1L << info[0];
            c2 ^= 1L << info[1];
        }
        int a = Long.bitCount(c1), b = Long.bitCount(c2);
        return a * (n - b) + (m - a) * b;
    }
}
```

* []

```TypeScript
function oddCells(m: number, n: number, ins: number[][]): number {
    const c1 = [0, 0], c2 = [0, 0]
    for (const [i, j] of ins) {
        c1[Math.ceil(i / 32)] ^= (1 << (i % 32))
        c2[Math.ceil(j / 32)] ^= (1 << (j % 32))
    }
    let a = 0, b = 0
    for (let i = 0; i < m; i++) a += (c1[Math.ceil(i / 32)] >> (i % 32) & 1)
    for (let i = 0; i < n; i++) b += (c2[Math.ceil(i / 32)] >> (i % 32) & 1)
    return a * (n - b) + (m - a) * b
};
```

* []

```Python3
class Solution:
    def oddCells(self, m: int, n: int, ins: List[List[int]]) -> int:
        c1, c2 = 0, 0
        for i, j in ins:
            c1 ^= (1 << i)
            c2 ^= (1 << j)
        a, b = 0, 0
        for i in range(m):
            a += (c1 >> i) & 1
        for i in range(n):
            b += (c2 >> i) & 1
        return a * (n - b) + (m - a) * b
```

* 时间复杂度：处理所有的 `ins` 复杂度为 $O(l)$，其中 $l$ 为数组 `ins` 的长度；使用遍历方式统计奇数行和奇数列个数复杂度为 $O(m + n)$；使用 `bitCount` 操作统计二进制中 $1$ 个数，复杂度为 $O(\log{C})$，其中 $C = 64$ 为 `long` 二进制数长度，整体复杂度为 $O(l + m + n)$ 或 $O(l + \log{C})$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
