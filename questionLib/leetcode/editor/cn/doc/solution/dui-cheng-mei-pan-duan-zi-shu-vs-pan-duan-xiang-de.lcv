#### 解题思路

要判断一个树 t 是不是树 s 的子树，那么可以判断 t 是否和树 s 的任意子树相等。那么就转化成 [100. Same Tree](https://leetcode-cn.com/problems/same-tree/)。
即，这个题的做法就是在 s 的每个子节点上，判断该子节点是否和 t 相等。

判断两个树是否**相等**的三个条件是**与**的关系，即：

1. 当前两个树的根节点值相等；
2. 并且，s 的左子树和 t 的左子树相等；
3. 并且，s 的右子树和 t 的右子树相等。

而判断 t 是否为 s 的**子树**的三个条件是**或**的关系，即：

1. 当前两棵树相等；
2. 或者，t 是 s 的左子树；
3. 或者，t 是 s 的右子树。

判断 是否是相等的树 与 是否是子树 的代码简直是对称美啊~

* []

```Python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSubtree(self, s, t):
        """
        :type s: TreeNode
        :type t: TreeNode
        :rtype: bool
        """
        if not s and not t:
            return True
        if not s or not t:
            return False
        return self.isSameTree(s, t) or self.isSubtree(s.left, t) or self.isSubtree(s.right, t)
        
    def isSameTree(self, s, t):
        if not s and not t:
            return True
        if not s or not t:
            return False
        return s.val == t.val and self.isSameTree(s.left, t.left) and self.isSameTree(s.right, t.right)
```

